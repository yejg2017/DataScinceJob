library(ggplot2)
library(dplyr)
library(funModeling)
library(Hmisc)
data = read.csv("./rt.csv",header = TRUE)
basic_eda <- function(data)
{
glimpse(data)
df_status(data)
freq(data)
profiling_num(data)
plot_num(data)
describe(data)
}
summary(data)
sprintf("Total NA value is :%d",sum(is.na(data)),"\n")
apply(data,2,function(x){return(sum(is.na(x)))})  # Na  in each varible
data=na.omit(data)
amount_of_sleep = data$Sleep
reaction_time = data$RT
sprintf("the mean of sleep:%f",mean(data$Sleep, na.rm= T))
summary(data$Sleep)
par(mfrow = c(1,2))
boxplot((data$Sleep), ylab = "Amount of Sleep")
plot(amount_of_sleep, reaction_time,main = paste0("Sleep vs reaction time\n","correlation:",cor(amount_of_sleep,reaction_time)))
af <- na.omit(data)
af$Sleep <- as.factor(af$Sleep)
ggplot(summarise(group_by(af, Sleep), RT = mean(RT)),aes(x= Sleep, y = RT)) + geom_bar(stat = "identity", position = position_stack())
summarise(group_by(af, Sleep), mean(RT))
freq(data$Sleep)
#stimulant = data$Stimulant
ggplot(data,aes(x = factor(Stimulate),y = RT)) +
theme_classic()  +
geom_boxplot() +
labs(title = "Boxplot of reaction time by stimulant",
x = "stimulant",
y = "reaction time")
af$Stimulant <- as.factor(af$Stimulate)
ggplot(summarise(group_by(af, Stimulant), RT = mean(RT)),aes(x= Stimulant, y = RT)) + geom_bar(stat = "identity", position = position_stack(),aes(color = Stimulant, fill = Stimulant))
summarise(group_by(af, Stimulant), mean(RT))
freq(af$Stimulate)
fatigue_scale = data$Fatigue
sprintf("the mean of fatigue:%f",mean(data$Fatigue, na.rm= T))
summary(data$Fatigue)
plot(fatigue_scale, reaction_time,main=paste0("fatigue vs reaction \n","corr:",cor(fatigue_scale,reaction_time)))
af$Sleep <- as.factor(af$Fatigue)
ggplot(summarise(group_by(af, Fatigue), RT = mean(RT)),aes(x= Fatigue, y = RT)) + geom_bar(stat = "identity", position = position_stack(), aes(color = Fatigue, fill = Fatigue))
ggplot(data,aes(x = factor(fatigue_scale),y = reaction_time)) +
theme_classic()  +
geom_boxplot() +
labs(title = "Boxplot of reaction time by fatigue",
x = "fatigue",
y = "reaction time")
summarise(group_by(af, Fatigue), mean(RT))
freq(data$Fatigue)
hunger_scale = data$Hunger
sprintf("the mean of hunger:%f",mean(data$Hunger, na.rm= T))
summary(data$Hunger)
plot(hunger_scale, reaction_time,main=paste0("hunger vs reaction \n","corr:",cor(hunger_scale,reaction_time)))
af$Hunger <- as.factor(af$Hunger)
af$Record<-as.factor(af$Record)
ggplot(summarise(group_by(af, Hunger), RT = mean(RT)),aes(x= Hunger, y = RT)) + geom_bar(stat = "identity", position = position_stack(), aes(color = Hunger, fill = Hunger))
ggplot(data,aes(x = factor(hunger_scale),y = reaction_time)) +
theme_classic()  +
geom_boxplot() +
labs(title = "Boxplot of reaction time by hunger",
x = "hunger",
y = "reaction time")
summarise(group_by(af, Hunger), mean(RT))
freq(data$Hunger)
day_type = data$busyOrlight
af$Type <- as.factor(af$busyOrlight)
ggplot(summarise(group_by(af, Type), RT = mean(RT)),aes(x= Type, y = RT)) + geom_bar(stat = "identity", position = position_stack(), aes(color = Type, fill = Type))
ggplot(data,aes(x = factor(day_type),y = reaction_time)) +
theme_classic()  +
geom_boxplot() +
labs(title = "Boxplot of reaction time by day type",
x = "type",
y = "reaction time")
summarise(group_by(af, Type), mean(RT))
freq(data$busyOrlight)
af$illness <- as.factor(af$illness)
ggplot(summarise(group_by(af, illness), RT = mean(RT)),aes(x= illness, y = RT)) + geom_bar(stat = "identity", position = position_stack(), aes(color = illness, fill = illness))
ggplot(data,aes(x = factor(illness),y = reaction_time)) +
theme_classic()  +
geom_boxplot() +
labs(title = "Boxplot of reaction time by illness",
x = "illness",
y = "reaction time")
summarise(group_by(af, illness), mean(RT))
freq(data$illness)
protocol = data$Protocol
summary(data$Protocol)
freq(data$Protocol)
af$MEQ <- as.factor(af$MEQ)
ggplot(summarise(group_by(af, MEQ), RT = mean(RT)),aes(x= MEQ, y = RT)) + geom_bar(stat = "identity", position = position_stack(), aes(color = MEQ, fill = MEQ))
ggplot(data,aes(x = factor(MEQ),y = reaction_time)) +
theme_classic()  +
geom_boxplot() +
labs(title = "Boxplot of reaction time by MEQ",
x = "MEQ",
y = "reaction time")
summarise(group_by(af, illness), mean(RT))
freq(data$MEQ)
record = data$Record
ggplot(data,aes(x = factor(record),y = reaction_time)) +
theme_classic()  +
geom_boxplot() +
labs(title = "Boxplot of reaction time by record number",
x = "record number",
y = "reaction time")
library(nlme)
library(lme4)
protocol=as.character(af$Protocol)
protocol=ifelse(protocol=="",2,ifelse(protocol=="?0",0,ifelse(protocol=="?1",1,ifelse(protocol=="0",0,1))))
af$Protocol=as.factor(as.integer(protocol))
#af$ID=as.factor(af$ID)
af$Fatigue=as.factor(af$Fatigue)
predictor=c("ID","Record","Stimulant","Fatigue","Hunger","Type","illness","Sleep","MEQ","Protocol")
model.full=lmer(RT~Stimulant+Fatigue+Hunger+Type+illness+Sleep+MEQ+Protocol+(1|Record),data = af,method="ML") #fit a linear model with a varying-intercept group effect using the variable Record.
AIC(model.full)
anova(model.full)
vif.mer <- function (fit) {
## adapted from rms::vif
v <- vcov(fit)
nam <- names(fixef(fit))
## exclude intercepts
ns <- sum(1 * (nam == "Intercept" | nam == "(Intercept)"))
if (ns > 0) {
v <- v[-(1:ns), -(1:ns), drop = FALSE]
nam <- nam[-(1:ns)]
}
d <- diag(v)^0.5
v <- diag(solve(v/(d %o% d)))
names(v) <- nam
v
}
RT_hat=predict(model.2,af[,c(predictor,"RT")])
RT_hat=predict(model.full,af[,c(predictor,"RT")])
```{r}
library(glmmLasso)
model=glmmLasso(RT~Stimulant+Fatigue+Hunger+Type+illness+Sleep+MEQ+Protocol+Record,family = acat(),
rnd = list(Record=~1),data = af,lambda = 10)
model=glmmLasso(RT~Stimulant+Fatigue+Hunger+Type+illness+Sleep+MEQ+Protocol+Record,
rnd = list(Record=~1),data = af,lambda = 10)
model
AIC(model)
logLik(model)
summary(model.full)
vcov(model.full)
vif.mer(model.full)
model.full@theta
model.full@devcomp
model.full@pp
str(model.full@resp)
>lmer
?lmer
fitted(model.full)
plot(fitted(model.full),residuals(model.full))
plot(fitted(model.full), residuals(model.full), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(model.full), residuals(model.full)))
plot(fitted(model.full), residuals(model.full), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(model.full), residuals(model.full)))
vif.step.1=vif.mer((model.full))
vif.step.1
names(vif.step.1)
names(vif.step.1)[which(vif.step.1)]
names(vif.step.1)[which(vif.step.1>5.0)]
vif.step.1=vif.mer(model.full)
names(vif.step.1)[which(vif.step.1>5.0)]
model.reduce.1=lmer(RT~Stimulant+Fatigue+Type+illness+Sleep+MEQ+(1|Record),data = af,method="ML")
model.reduce.1
AIC(model.full)
AIC(model.reduce.1)
AIC(model.full,model.reduce.1)
anova(model.full,model.reduce.1)
vif.step.2=vif.mer(model.reduce.1)
names(vif.step.2)[which(vif.step.2>5.0)]
rm(RT_hat)
par(mfrow=c(2,1))
plot(fitted(model.full), residuals(model.full), xlab = "Fitted Values", ylab = "Residuals",main="full model")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(model.full), residuals(model.full)),col="red")
plot(fitted(model.reduce.1), residuals(model.reduce.1), xlab = "Fitted Values", ylab = "Residuals",main="reduce(final) model")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(model.reduce.1), residuals(model.reduce.1)),col="red")
par(mfrow=c(1,2))
plot(fitted(model.full), residuals(model.full), xlab = "Fitted Values", ylab = "Residuals",main="full model")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(model.full), residuals(model.full)),col="red")
plot(fitted(model.reduce.1), residuals(model.reduce.1), xlab = "Fitted Values", ylab = "Residuals",main="reduce(final) model")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(model.reduce.1), residuals(model.reduce.1)),col="red")
AIC(model.full,model.reduce.1)
anova(model.full,model.reduce.1)
BIC(model.full,model.reduce.1)
?lmer
print(summary(model.full),digits=7,corr=T)
summary(model.reduce.1)
model.reduce.1
coef(model.reduce.1)
print(lme4::fixef(model.reduce.1))
print(lme4::ranef(model.reduce.1))
qqnorm(residuals(model.reduce.1))
print(lme4::fixef(model.reduce.1))  # print fixed effect coefficients
print(lme4::ranef(model.reduce.1))  # print fixed effect coefficients
model.reduce.1
cor(af$RT,fitted(model.reduce.1))^2
cor(af$RT,fitted(model.full))^2
logLik(model.full)
logLik(model.reduce.1)
logLik(model.reduce.1,model.full)
logLik(model.full)
as.numeric(logLik(model.full))
cor(af$RT,fitted(mer(RT~Stimulant+Fatigue+Hunger+Type+illness+Sleep+MEQ+Protocol+(1|Record)+(1|ID),data = af,method="ML")))^2
cor(af$RT,fitted(lmer(RT~Stimulant+Fatigue+Hunger+Type+illness+Sleep+MEQ+Protocol+(1|Record)+(1|ID),data = af,method="ML")))^2
model.full=lmer(RT~Stimulant+Fatigue+Hunger+Type+illness+Sleep+MEQ+Protocol+(1|Record)+(l|ID),data = af,method="ML") #fit a linear model with a varying-intercept group effect using the variable Record.
model.full=lmer(RT~Stimulant+Fatigue+Hunger+Type+illness+Sleep+MEQ+Protocol+(1|Record)+(1|ID),data = af,method="ML") #fit a linear model with a varying-intercept group effect using the variable Record.
AIC(model.full)
anova(model.full)
vif.step.1=vif.mer(model.full)
names(vif.step.1)[which(vif.step.1>5.0)]
model.reduce.1=lmer(RT~Stimulant+Fatigue+Type+illness+Sleep+MEQ+(1|Record)+(1| ID),data = af,method="ML")
vif.step.2=vif.mer(model.reduce.1)
names(vif.step.2)[which(vif.step.2>5.0)]
model.reduce.1=lmer(RT~Stimulant+Fatigue+Type+illness+Sleep+MEQ+Protocol+(1|Record)+(1| ID),data = af,method="ML")
vif.step.2=vif.mer(model.reduce.1)
names(vif.step.2)[which(vif.step.2>5.0)]
cor(af$RT,fitted(model.full))^2
cor(af$RT,fitted(model.reduce.1))^2
par(mfrow=c(1,2))
plot(fitted(model.full), residuals(model.full), xlab = "Fitted Values", ylab = "Residuals",main="full model")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(model.full), residuals(model.full)),col="red")
plot(fitted(model.reduce.1), residuals(model.reduce.1), xlab = "Fitted Values", ylab = "Residuals",main="reduce(final) model")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(model.reduce.1), residuals(model.reduce.1)),col="red")
logLik(model.full)
logLik(model.reduce.1)
anova(model.full,model.reduce.1)
print(lme4::fixef(model.reduce.1))  # print fixed effect coefficients
print(lme4::ranef(model.reduce.1))  # print fixed effect coefficients
table(af$Protocol)
logLik(model.full)
logLik(model.reduce.1)
sprintf("The R square of full model is :%f",cor(af$RT,fitted(model.full))^2)
sprintf("The R square of reduce  model is :%f",cor(af$RT,fitted(model.reduce.1))^2)
