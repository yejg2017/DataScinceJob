E=sample_sd/sqrt(n)
## confidence interval
lower=kurt_hat-E*t_alpha_2
upper=kurt_hat+E*t_alpha_2
return(list(lower,upper))
}
BootConf(y,size=10,times=1000)
BootConf(y,size=20,times=1000)
BootConf(y,size=1000,times=1000)
BootConf(y,size=200,times=1000)
BootConf(y,size=200,times=10000)
Kurt(y)
### try size=100,times=1000 to caculate confdence interval
BootConf(y,size=100,times=1000)
### try size=100,times=1000 to caculate confdence interval
boxplot(BootConf(y,size=100,times=1000))
BootConf(y,size=10,times=1000)
BootConf(y,size=20,times=1000)
BootConf(y,size=50,times=1000)
BootConf(y,size=100,times=1000)
BootConf(y,size=200,times=1000)
## Question 3
install.packages("DAAG")
library(DAAG)
data("rainforest")
str(rainforest)
rainforest
rainforest$wood
?subset
subset(rainforest,species%in%c())
str(rainforest$species)
(rainforest$species)
subset(rainforest,species%in%c("B. myrtifolia","Acmena smithii"),wood)
table(rainforest$species)
Bmyrtifolia.wood<-subset(rainforest,species%in%c("B. myrtifolia"),wood)
Acmenasmithii.wood<-subset(rainforest,species%in%c("Acmena smithii"),wood)
Bmyrtifolia.wood
Acmenasmithii.wood
dim(Bmyrtifolia.wood)
dim(Acmenasmithii.wood)
as.vector(Bmyrtifolia.wood)
Bmyrtifolia.wood$wood
return(rowMeans(Y))
Bootstrap<-function(x,size,times=1000){
Y=data.frame()
for(i in 1:times){
y=sample(z,size = size,replace = TRUE)
y=t(data.frame(y))
Y=rbind(Y,y)
}
name=paste0("Boostrap_",1:times)
rownames(Y)=name
return(rowMeans(Y))
}
x=Bootstrap(Bmyrtifolia.wood,size=20,times = 1000)
Bootstrap<-function(x,size,times=1000){
Y=data.frame()
for(i in 1:times){
y=sample(x,size = size,replace = TRUE)
y=t(data.frame(y))
Y=rbind(Y,y)
}
name=paste0("Boostrap_",1:times)
rownames(Y)=name
return(rowMeans(Y))
}
x=Bootstrap(Bmyrtifolia.wood,size=20,times = 1000)
Bootstrap<-function(x,size,times=1000){
Y=data.frame()
for(i in 1:times){
y=sample(x,size = size,replace = TRUE)
y=t(data.frame(y))
Y=rbind.data.frame(Y,y)
}
name=paste0("Boostrap_",1:times)
rownames(Y)=name
return(rowMeans(Y))
}
x=Bootstrap(Bmyrtifolia.wood,size=20,times = 1000)
Bootstrap<-function(x,size,times=1000){
Y=data.frame()
for(i in 1:times){
y=sample(x,size = size,replace = TRUE)
y=t(data.frame(y))
Y=rbind.data.frame(Y,y)
}
return(rowMeans(Y))
}
x=Bootstrap(Bmyrtifolia.wood,size=20,times = 1000)
length(x)
Bootstrap<-function(x,size,times=1000){
Y=data.frame()
for(i in 1:times){
y=sample(x,size = size,replace = TRUE)
y=t(data.frame(y))
Y=rbind.data.frame(Y,y)
}
return(apply(Y,1,mean))
}
x=Bootstrap(Bmyrtifolia.wood,size=20,times = 1000)
length(x)
sample(Bmyrtifolia.wood.20)
sample(Bmyrtifolia.wood,20)
sample(Bmyrtifolia.wood,20,replace = T)
Bmyrtifolia.wood<-subset(rainforest,species%in%c("B. myrtifolia"),wood)$wood
Acmenasmithii.wood<-subset(rainforest,species%in%c("Acmena smithii"),wood)$wood
sample(Bmyrtifolia.wood,20,replace = T)
x=Bootstrap(Bmyrtifolia.wood,size = 20)
length(x)
head(x)
Bmyrtifolia.wood<-subset(rainforest,species%in%c("B. myrtifolia"),wood)$wood
Acmenasmithii.wood<-subset(rainforest,species%in%c("Acmena smithii"),wood)$wood
Bootstrap<-function(x,size,times=1000){
Y=data.frame()
for(i in 1:times){
y=sample(x,size = size,replace = TRUE)
y=t(data.frame(y))
Y=rbind.data.frame(Y,y)
}
name=paste0("Boostrap_",1:times)
rownames(Y)=name
return(apply(Y,1,mean))
}
x=Bootstrap(Bmyrtifolia.wood,size = 20)
length(x)
head(x)
BmyrWood<-Bootstrap(Bmyrtifolia.wood,size = 50)
AcmeaWood<-Bootstrap(Acmenasmithii.wood,size = 50)
t.test(BmyrWood,AcmeaWood)
x=t.test(BmyrWood,AcmeaWood)
x$conf.int
?t.test
size50<-t.test(BmyrWood,AcmeaWood,conf.level = 0.95,alternative = "two.sided")$conf.int
size50
install.packages("ALSM")
library(ALSM)
install.packages("leaps")
library(ALSM)
?ALSM::MLS
ci.reg
data("BodyFat")
head(BodyFat)
data("CashOffers")
head(CashOffers)
data("CastleBakery")
head(CastleBakery)
data("GroceryRetailer")
head(GroceryRetailer)
data(JobProficiency)
head(JobProficiency)
data(JobProficiencyAdditional)
head(JobProficiencyAdditional)
data(PortraitStudio)
head(PortraitStudio)
data("SurgicalUnitAdditional")
head(SurgicalUnitAdditional)
head(SurgicalUnit)
setwd("D:/DataScience-job/20181126R/")
# load necessary packages and dataset
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
# load necessary packages and dataset
library(rpart)
library(rpart.plot)
eBaysAuctions<-read.csv("./eBayAuctions.csv",header = TRUE)
#str(eBaysAuctions)  # check struct of dataset
str(eBaysAuctions)
eBaysAuctions$Duration<-as.factor(eBaysAuctions$Duration) #  Convert Duration into catergorical variable
eBaysAuctions$Competitive<-as.factor(eBaysAuctions$Competitive.)
eBaysAuctions$Competitive.<-NULL
eBaysAuctions$Competitive<-ifelse(eBaysAuctions$Competitive==0,"unCompetive","Competive")
eBaysAuctions$Competitive<-as.factor(eBaysAuctions$Competitive)
# split dataset into train(60%) and test(40%)
set.seed(20181126)
n<-dim(eBaysAuctions)[1]
train_idx<-sample(1:n,size = ceiling(n*0.6),replace = FALSE)
test_idx<-setdiff(1:n,train_idx)
train<-eBaysAuctions[train_idx,]
test<-eBaysAuctions[test_idx,]
str(eBaysAuctions)
model<-rpart(Competitive~.,data = train,method = "class",
control = list(minbucket=50,maxdepth=7,minsplit=1)) #,xval=5 # xval=5,5 fold validation
# plot tree
prp(model, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model$frame$var == "<leaf>", 'green', "gray"))
train_pred<-predict(model,newdata = train,type = "class")
train_ConfusionMat<-table(train$Competitive,train_pred)
train_acc<-sum(diag(train_ConfusionMat))/sum(train_ConfusionMat)
cat("The Accuracy of train dataset of the origin model is :",train_acc,"\n")
test_pred<-predict(model,newdata = test,type = "class")
test_ConfusionMat<-table(test$Competitive,test_pred)
test_acc<-sum(diag(test_ConfusionMat))/sum(test_ConfusionMat)
cat("The Accuracy of test dataset of the origin model is :",test_acc,"\n")
dim(eBaysAuctions)
hist(eBaysAuctions$sellerRating)
boxplot(eBaysAuctions$sellerRating)
boxplot(eBaysAuctions$OpenPrice)
summary(eBaysAuctions$Category)
bar(eBaysAuctions$Category)
barplot(eBaysAuctions$Category)
# prune tree
model.prune<- prune(model, cp =model$cptable[which.min(model$cptable[,"xerror"]),"CP"])
prp(model.prune, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model$frame$var == "<leaf>", 'green', "gray"))
train_pred<-predict(model.prune,newdata = train,type = "class")
train_ConfusionMat<-table(train$Competitive,train_pred)
train_acc<-sum(diag(train_ConfusionMat))/sum(train_ConfusionMat)
cat("The Accuracy of train dataset of the prune model is :",train_acc,"\n")
test_pred<-predict(model.prune,newdata = test,type = "class")
test_ConfusionMat<-table(test$Competitive,test_pred)
test_acc<-sum(diag(test_ConfusionMat))/sum(test_ConfusionMat)
cat("The Accuracy of test dataset of the prune model is :",test_acc,"\n")
# prune tree
model.prune<- prune(model, cp =model$cptable[which.min(model$cptable[,"xerror"]),"CP"])
prp(model.prune, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model$frame$var == "<leaf>", 'green', "gray"))
train_pred<-predict(model.prune,newdata = train,type = "class")
train_ConfusionMat<-table(train$Competitive,train_pred)
train_acc<-sum(diag(train_ConfusionMat))/sum(train_ConfusionMat)
cat("The Accuracy of train dataset of the prune model is :",train_acc,"\n")
test_pred<-predict(model.prune,newdata = test,type = "class")
test_ConfusionMat<-table(test$Competitive,test_pred)
test_acc<-sum(diag(test_ConfusionMat))/sum(test_ConfusionMat)
cat("The Accuracy of test dataset of the prune model is :",test_acc,"\n")
prp(model.prune, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model$frame$var == "<leaf>", 'green', "gray"))
prp(model.prune, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model.prune$frame$var == "<leaf>", 'green', "gray"))
prp(model.prune, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model.prune$frame$var == "<leaf>", 'green', "gray"))
# load necessary packages and dataset
library(rpart)
library(rpart.plot)
eBaysAuctions<-read.csv("./eBayAuctions.csv",header = TRUE)
#str(eBaysAuctions)  # check struct of dataset
str(eBaysAuctions)
eBaysAuctions$Duration<-as.factor(eBaysAuctions$Duration) #  Convert Duration into catergorical variable
eBaysAuctions$Competitive<-as.factor(eBaysAuctions$Competitive.)
eBaysAuctions$Competitive.<-NULL
eBaysAuctions$Competitive<-ifelse(eBaysAuctions$Competitive==0,"unCompetive","Competive")
eBaysAuctions$Competitive<-as.factor(eBaysAuctions$Competitive)
# split dataset into train(60%) and test(40%)
set.seed(20181126)
n<-dim(eBaysAuctions)[1]
train_idx<-sample(1:n,size = ceiling(n*0.6),replace = FALSE)
test_idx<-setdiff(1:n,train_idx)
train<-eBaysAuctions[train_idx,]
test<-eBaysAuctions[test_idx,]
model<-rpart(Competitive~.,data = train,method = "class",
control = list(minbucket=50,maxdepth=7,minsplit=1)) #,xval=5 # xval=5,5 fold validation
# plot tree
prp(model, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model$frame$var == "<leaf>", 'green', "gray"))
train_pred<-predict(model,newdata = train,type = "class")
train_ConfusionMat<-table(train$Competitive,train_pred)
train_acc<-sum(diag(train_ConfusionMat))/sum(train_ConfusionMat)
cat("The Accuracy of train dataset of the origin model is :",train_acc,"\n")
test_pred<-predict(model,newdata = test,type = "class")
test_ConfusionMat<-table(test$Competitive,test_pred)
test_acc<-sum(diag(test_ConfusionMat))/sum(test_ConfusionMat)
cat("The Accuracy of test dataset of the origin model is :",test_acc,"\n")
# prune tree
model.prune<- prune(model, cp =model$cptable[which.min(model$cptable[,"xerror"]),"CP"])
prp(model.prune, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model.prune$frame$var == "<leaf>", 'green', "gray"))
train_pred<-predict(model.prune,newdata = train,type = "class")
train_ConfusionMat<-table(train$Competitive,train_pred)
train_acc<-sum(diag(train_ConfusionMat))/sum(train_ConfusionMat)
cat("The Accuracy of train dataset of the prune model is :",train_acc,"\n")
test_pred<-predict(model.prune,newdata = test,type = "class")
test_ConfusionMat<-table(test$Competitive,test_pred)
test_acc<-sum(diag(test_ConfusionMat))/sum(test_ConfusionMat)
cat("The Accuracy of test dataset of the prune model is :",test_acc,"\n")
?rpart.control
# prune tree
model.2<-rpart(Competitive~OpenPrice+ClosePrice+sellerRati.,data = train,method = "class",
control = list(minbucket=50,maxdepth=7,minsplit=1)) #,xval=5 # xval=5,5 fold validation
colnames(eBaysAuctions)
# prune tree
model.2<-rpart(Competitive~OpenPrice+ClosePrice+sellerRating,data = train,method = "class",
control = list(minbucket=50,maxdepth=7,minsplit=1)) #,xval=5 # xval=5,5 fold validation
# prune tree
model.2<-rpart(Competitive~OpenPrice+ClosePrice+sellerRating,data = train,method = "class",
control = list(minbucket=50,maxdepth=7,minsplit=1)) #,xval=5 # xval=5,5 fold validation
model.2<- prune(model.2, cp =model.2$cptable[which.min(model$cptable[,"xerror"]),"CP"])
prp(model.2, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model.2$frame$var == "<leaf>", 'green', "gray"))
train_pred<-predict(model.2,newdata = train,type = "class")
train_ConfusionMat<-table(train$Competitive,train_pred)
train_acc<-sum(diag(train_ConfusionMat))/sum(train_ConfusionMat)
cat("The Accuracy of train dataset of the prune model is :",train_acc,"\n")
test_pred<-predict(model.2,newdata = test,type = "class")
test_ConfusionMat<-table(test$Competitive,test_pred)
test_acc<-sum(diag(test_ConfusionMat))/sum(test_ConfusionMat)
cat("The Accuracy of test dataset of the prune model is :",test_acc,"\n")
# prune tree
model.2<-rpart(Competitive~OpenPrice+ClosePrice+sellerRating,data = train,method = "class")
model.2<- prune(model.2, cp =model.2$cptable[which.min(model$cptable[,"xerror"]),"CP"])
prp(model.2, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model.2$frame$var == "<leaf>", 'green', "gray"))
train_pred<-predict(model.2,newdata = train,type = "class")
train_ConfusionMat<-table(train$Competitive,train_pred)
train_acc<-sum(diag(train_ConfusionMat))/sum(train_ConfusionMat)
cat("The Accuracy of train dataset of the prune model is :",train_acc,"\n")
test_pred<-predict(model.2,newdata = test,type = "class")
test_ConfusionMat<-table(test$Competitive,test_pred)
test_acc<-sum(diag(test_ConfusionMat))/sum(test_ConfusionMat)
cat("The Accuracy of test dataset of the prune model is :",test_acc,"\n")
rm(model.prune)
train_pred<-predict(model,newdata = train,type = "class")
train_ConfusionMat<-table(train$Competitive,train_pred)
train_acc<-sum(diag(train_ConfusionMat))/sum(train_ConfusionMat)
cat("The Accuracy of train dataset of the origin model is :",train_acc,"\n")
test_pred<-predict(model,newdata = test,type = "class")
test_ConfusionMat<-table(test$Competitive,test_pred)
test_acc<-sum(diag(test_ConfusionMat))/sum(test_ConfusionMat)
cat("The Accuracy of test dataset of the origin model is :",test_acc,"\n")
# prune tree
model.2<-rpart(Competitive~OpenPrice+ClosePrice+sellerRating,data = train,method = "class")
model.2<- prune(model.2, cp =model.2$cptable[which.min(model$cptable[,"xerror"]),"CP"])
prp(model.2, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model.2$frame$var == "<leaf>", 'green', "gray"))
train_pred<-predict(model.2,newdata = train,type = "class")
train_ConfusionMat<-table(train$Competitive,train_pred)
train_acc<-sum(diag(train_ConfusionMat))/sum(train_ConfusionMat)
cat("The Accuracy of train dataset of the prune model is :",train_acc,"\n")
test_pred<-predict(model.2,newdata = test,type = "class")
test_ConfusionMat<-table(test$Competitive,test_pred)
test_acc<-sum(diag(test_ConfusionMat))/sum(test_ConfusionMat)
cat("The Accuracy of test dataset of the prune model is :",test_acc,"\n")
library(ggplot2)
ggplot(data=eBaysAuctions,aes(x=OpenPrice,y=ClosePrice,color=Competitive))+geom_point()
ggplot(data=eBaysAuctions,aes(x=OpenPrice,y=ClosePrice,color=Competitive))+geom_point()+theme(legend.title = element_blank())
library(ggplot2)
ggplot(data=eBaysAuctions,aes(x=OpenPrice,y=ClosePrice,color=Competitive))+
geom_point()+geom_abline(intercept = 0.0, slope = 1)+
theme(legend.title = element_blank())
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
?confusionMatrix
confusionMatrix(train_pred,train$Competitive)
library(caret)
cat("The train dataset confusionMatrix: \n")
confusionMatrix(train_pred,train$Competitive)
library(caret)
cat("The train dataset confusionMatrix:","\n")
confusionMatrix(train_pred,train$Competitive)
cat("The train dataset confusionMatrix:","\n")
confusionMatrix(train_pred,train$Competitive)
cat("The validation dataset confusionMatrix:","\n")
confusionMatrix(test_pred,test$Competitive)
?lift.chart
??lift.chart
install.packages("BCA ")
install.packages("https://www.rdocumentation.org/packages/BCA")
install.packages('party')
install.packages('ROCR')
install.packages('party')
require(ROCR)
require(party)
train_prob<-predict(model.2,newdata = train,type = "prob")
train_prob[1:6]
train_pred<-performance(train_prob,train$Competitive)
train_pred<-prediction(train_prob,train$Competitive)
length(model.2)
length(train_pred)
length(train_prob)
dim(train_prob)
train_pred<-prediction(train_prob[,1],train$Competitive)
train_prob<-predict(model.2,newdata = train,type = "prob")
train_pred<-prediction(train_prob[,1],train$Competitive)
train_perf<-performance(train_pred,"lift","rpp")
plot(train_perf, main="lift curve", colorize=T)
train_prob<-predict(model.2,newdata = train,type = "prob")
train_pred<-prediction(train_prob[,2],train$Competitive)
train_perf<-performance(train_pred,"lift","rpp")
plot(train_perf, main="lift curve", colorize=T)
train_prob<-predict(model.2,newdata = train,type = "prob")
train_pred<-prediction(train_prob[,1],train$Competitive)
train_perf<-performance(train_pred,"lift","rpp")
plot(train_perf, main="lift curve", colorize=T)
head(train_pred)
train_pred
train_prob<-predict(model.2,newdata = train,type = "prob")
train_pred<-prediction(train_prob[,1],train$Competitive)
train_perf<-performance(train_pred,"lift","rpp")
plot(train_perf, main="lift curve(train)", colorize=T)
test_prob<-predict(model.2,newdata = test,type = "prob")
test_pred<-prediction(test_prob[,1],test$Competitive)
test_perf<-performance(test_pred,"lift","rpp")
plot(test_perf, main="lift curve(validaton)", colorize=T)
train_prob<-predict(model.2,newdata = train,type = "prob")
train_pred<-prediction(train_prob[,2],train$Competitive)
train_perf<-performance(train_pred,"lift","rpp")
plot(train_perf, main="lift curve(train)", colorize=T)
test_prob<-predict(model.2,newdata = test,type = "prob")
test_pred<-prediction(test_prob[,2],test$Competitive)
test_perf<-performance(test_pred,"lift","rpp")
plot(test_perf, main="lift curve(validaton)", colorize=T)
prp(model.2, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10,
box.col=ifelse(model.2$frame$var == "<leaf>", 'green', "gray"))
pairs(eBaysAuctions[,c("OpenPrice","ClosePrice","sellerRating")])
intersting<-eBaysAuctions[,c("OpenPrice","ClosePrice","Seller","Competitive")]
colnames(eBaysAuctions)
intersting<-eBaysAuctions[,c("OpenPrice","ClosePrice","SellerRating","Competitive")]
intersting<-eBaysAuctions[,c("OpenPrice","ClosePrice","sellerRating","Competitive")]
unintersting<-eBaysAuctions[,-c("OpenPrice","ClosePrice","sellerRating","Competitive")]
unintersting<-eBaysAuctions[,c("Category","currency","Duration","endDay","Competitive")]
library(reshape2)
head(melt(intersting))
plot(density(eBaysAuctions$sellerRating))
plot(density(eBaysAuctions$sellerRating),col="red")
plot(density(eBaysAuctions$sellerRating),col="red",main="sellerRating",xlab="")
plot(density(eBaysAuctions$sellerRating),col="red",main="sellerRating")
intersting<-eBaysAuctions[,c("OpenPrice","ClosePrice","sellerRating","Competitive")]
unintersting<-eBaysAuctions[,c("Category","currency","Duration","endDay","Competitive")]
par(mfrow=c(3,1))
plot(density(eBaysAuctions$sellerRating),col="red",main="sellerRating")
plot(density(eBaysAuctions$OpenPrice),col="red",main="OpenPrice")
plot(density(eBaysAuctions$ClosePrice),col="red",main="ClosePrice")
p<-ggplot(data=intersting)+geom_density(aes(y=value))
p
intersting.melt<-melt(intersting)
p<-ggplot(data=intersting.melt)+geom_density(aes(y=value))
p
p<-ggplot(data=intersting.melt)+geom_density(aes(xvalue))
p<-ggplot(data=intersting.melt)+geom_density(aes(x=value))
p
p<-ggplot(data=intersting.melt)+geom_density(aes(x=value,color=variable))
p
p<-ggplot(data=intersting.melt)+geom_density(aes(x=value))+facet_wrap(~variable)
p
summary(eBaysAuctions$sellerRating)
plot(density(eBaysAuctions$sellerRating),col="red",main="sellerRating")
plot(density(eBaysAuctions$OpenPrice),col="red",main="OpenPrice")
plot(density(eBaysAuctions$ClosePrice),col="red",main="ClosePrice")
plot(density(eBaysAuctions$sellerRating),col="red",main=paste0("sellerRating",":",mean(eBaysAuctions$sellerRating)))
plot(density(eBaysAuctions$OpenPrice),col="red",main=paste0("OpenPrice",":",mean(eBaysAuctions$OpenPrice)))
plot(density(eBaysAuctions$ClosePrice),col="red",main=paste0("ClosePrice",":",mean(eBaysAuctions$ClosePrice)))
plot(density(eBaysAuctions$sellerRating),col="red",main=paste0("sellerRating","(mean :",mean(eBaysAuctions$sellerRating,")")))
plot(density(eBaysAuctions$sellerRating),col="red",main=paste0("sellerRating","(mean :",mean(eBaysAuctions$sellerRating),")"))
plot(density(eBaysAuctions$OpenPrice),col="red",main=paste0("OpenPrice","(mean :",mean(eBaysAuctions$OpenPrice),")"))
plot(density(eBaysAuctions$ClosePrice),col="red",main=paste0("ClosePrice","(mean :",mean(eBaysAuctions$ClosePrice),")"))
unintersting.melt<-melt(unintersting)
head(unintersting.melt)
str(eBaysAuctions)
?barplot
unintersting<-eBaysAuctions[,c("Category","currency","Duration","endDay")]
barplot(unintersting)
barplot(as.matrix(unintersting))
barplot(as.matrix(unintersting),beside = T)
#intersting<-eBaysAuctions[,c("OpenPrice","ClosePrice","sellerRating","Competitive")]
unintersting<-eBaysAuctions[,c("Category","currency","Duration","endDay","Competitive")]
unintersting.melt<-melt(unintersting,id.vars = "Competitive")
head(unintersting.melt)
p<-ggplot(data=unintersting.melt)+geom_bar(aes(x = variable,y=value))
p
p<-ggplot(data=unintersting.melt)+geom_bar(aes(y=value,group=variable))
p
?mwelt
?melt
unintersting.melt<-melt(unintersting,measure.vars  = "Competitive")
head(unintersting.melt)
?geom_bar
ggplot(data=unintersting.melt)+geom_bar(aes(x=value,y=Category))
Category<-eBaysAuctions[,"Category"]
currency<-eBaysAuctions[,"currency"]
Duration<-eBaysAuctions[,"Duration"]
endDay<-eBaysAuctions[,"endDay"]
rm(unintersting)
x=eBaysAuctions[,c("Category","Competitive")]
ggplot(data=x,aes(x=Category))+geom_bar()
ggplot(data=x,aes(x=Category,group=Competitive))+geom_bar()
p=ggplot(data=x,aes(x=Category,group=Competitive))+geom_bar()
?geom_bar
p=ggplot(data=x,aes(x=Category,group=Competitive))+geom_bar(position = "stack")
p
p=ggplot(data=x,aes(x=Category,colour=Competitive))+geom_bar(position = "stack")
p
p=ggplot(data=x,aes(x=Category,fill=Competitive))+geom_bar(position = "stack")
p=ggplot(data=x,aes(x=Category)+geom_bar(fill=Competitive,position = "stack")
)
p=ggplot(data=x,aes(x=Category))+geom_bar(fill=Competitive,position = "stack")
p=ggplot(data=x)+geom_bar(aes(x=Category),fill=Competitive,position = "stack")
p=ggplot(data=x)+geom_bar(aes(x=Category,fill=Competitive),position = "stack")
p
p=ggplot(data=x)+geom_bar(aes(x=Category,fill=Competitive),position = "stack",stat = "freq")
p=ggplot(data=x)+geom_bar(aes(x=Category,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90))
p
ggplot(data=x)+geom_bar(aes(x=Category,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
ggplot(data=x)+geom_bar(aes(x=Category,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
unintersting<-eBaysAuctions[,c("Category","currency","Duration","endDay","Competitive")]
#Category<-eBaysAuctions[,"Category"]
#currency<-eBaysAuctions[,"currency"]
#Duration<-eBaysAuctions[,"Duration"]
#endDay<-eBaysAuctions[,"endDay"]
ggplot(data=x)+geom_bar(aes(x=Category,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
ggplot(data=x)+geom_bar(aes(x=currency,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
ggplot(data=x)+geom_bar(aes(x=Duration,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
ggplot(data=x)+geom_bar(aes(x=endDay,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
unintersting<-eBaysAuctions[,c("Category","currency","Duration","endDay","Competitive")]
#Category<-eBaysAuctions[,"Category"]
#currency<-eBaysAuctions[,"currency"]
#Duration<-eBaysAuctions[,"Duration"]
#endDay<-eBaysAuctions[,"endDay"]
ggplot(data=x)+geom_bar(aes(x=Category,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
ggplot(data=x)+geom_bar(aes(x=currency,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
ggplot(data=x)+geom_bar(aes(x=Duration,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
ggplot(data=x)+geom_bar(aes(x=endDay,fill=Competitive),position = "stack")+theme(axis.text.x = element_text(angle = 90,face = "bold"))
