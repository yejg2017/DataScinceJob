# 1. Create the normalize() function and check if it work correctly using a vector of numbers before applying this function to the whole data.
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)));
}
# test normalization function - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# 2. To apply the normalize() function to the whole data use the lapply() function.
lego_n <- as.data.frame(lapply(lego[2],normalize))
summary(lego_n$list_price)
dim(lego)
dim(lego_n)
sample(sim(lego_n[1]))
sample(dim(lego_n[1]))
?sample
x=sample(1:dim(lego_n[1]),dim(lego)[1])
head(x)
# 1. Create those training and test sets
set.seed(12345)
#lego_train_sample <- order(runif())
lego_train_sample<-sample(1:dim(lego)[1],dim(lego)[1])
lego_train <- lego_n[lego_train_sample[1:length(lego_train_sample)*0.8],]
lego_test <- lego_n[lego_train_sample[length(lego_train_sample)*0.8:length(lego_train_sample)],]
int(2.0)
as.integer(2.0)
# 1. Create those training and test sets
set.seed(12345)
#lego_train_sample <- order(runif())
lego_train_sample<-sample(1:dim(lego)[1],dim(lego)[1])
lego_train <- lego_n[lego_train_sample[1:as.integer(length(lego_train_sample)*0.8]),]
# 1. Create those training and test sets
set.seed(12345)
#lego_train_sample <- order(runif())
lego_train_sample<-sample(1:dim(lego)[1],dim(lego)[1])
lego_train <- lego_n[lego_train_sample[1:as.integer(length(lego_train_sample)*0.8)],]
lego_test <- lego_n[lego_train_sample[as.integer(length(lego_train_sample)*0.8):length(lego_train_sample)],]
2099+8389
lego_train_sample <- order(runif(dim(lego)[1]))
length(lego_train_sample)
dim(lego_train)
length(lego_train_sample)*0.8
# 1. Create those training and test sets
set.seed(12345)
lego_train_sample <- order(runif(dim(lego)[1]))
lego_train <- lego_n[lego_train_sample[1:8972],]
lego_test <- lego_n[lego_train_sample[8973:length(lego_train_sample)],]
# 2. Can you store its correspondents target variable in 2 separate vectors?
lego_train_lables <- lego_n[lego_train_sample[1:8972,5]]
dim(lego_n)
head(lego_n)
str(lego$list_price)
str(lego[,5])
lego_test <- lego[lego_train_sample[8973:length(lego_train_sample)],]
# 1. Create those training and test sets
set.seed(12345)
lego_train_sample <- order(runif(dim(lego)[1]))
lego_train <- lego[lego_train_sample[1:8972],]
lego_test <- lego[lego_train_sample[8973:length(lego_train_sample)],]
head(lego_train)
str(lego$country)
dim(na.omit(lego))
# 1. Import and read the csv data file.
lego <- read.csv("lego_sets_1.csv")
lego<-na.omit(lego)
dim(lego)
# 2. Examine the structure of the wbcd data frame.
str(lego)
# 3. Drop features
lego$prod_long_desc<-NULL
lego$prod_desc <- NULL
lego$prod_id <- NULL
lego$set_name <- NULL
lego$theme_name <- NULL
lego=na.omit(lego)
# 4. Find the target variable. How many levels this variable have?
table(lego$country)
str(lego$country)
table(lego$country)
# 5. Transform this nominal variable to factor and give its levels a better names. What are their correspondent鈥檚 percentage with 1 decimal place?
lego$country <- factor(lego$country, levels = c("NON US","US"), labels = c("None USA","USA"))
# 5. Transform this nominal variable to factor and give its levels a better names. What are their correspondent鈥檚 percentage with 1 decimal place?
lego$country <- factor(lego$country, levels = c("NON US","US"), labels = c("None USA","USA"))
table(lego$country)
# 1. Import and read the csv data file.
lego <- read.csv("lego_sets_1.csv")
lego<-na.omit(lego)
# 3. Drop features
lego$prod_long_desc<-NULL
lego$prod_desc <- NULL
lego$prod_id <- NULL
lego$set_name <- NULL
lego$theme_name <- NULL
lego=na.omit(lego)
# 4. Find the target variable. How many levels this variable have?
table(lego$country)
# 5. Transform this nominal variable to factor and give its levels a better names. What are their correspondent鈥檚 percentage with 1 decimal place?
lego$country <- factor(lego$country, levels = c("NON US","US"), labels = c("None USA","USA"))
round(prop.table(table(lego$country)) * 100, digits = 1)
# 1. Create the normalize() function and check if it work correctly using a vector of numbers before applying this function to the whole data.
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)));
}
# test normalization function - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# 2. To apply the normalize() function to the whole data use the lapply() function.
lego_n <- as.data.frame(lapply(lego[2],normalize))
summary(lego_n$list_price)
dim(na.omit(lego))
lego=na.omit(lego)
# 1. Create those training and test sets
set.seed(12345)
lego_train_sample <- order(runif(dim(lego)[1]))
lego_train <- lego[lego_train_sample[1:6000],]
lego_test <- lego[lego_train_sample[6001:length(lego_train_sample)],]
colnames(lego)
# 2. Can you store its correspondents target variable in 2 separate vectors?
lego_train_lables <- lego[lego_train_sample[1:6000],"country"]
lego_test_lables <- lego[lego_train_sample[6001:length(lego_train_sample)],"country"]
table(lego_test_lables)
# 1. Create those training and test sets
set.seed(12345)
lego_train_sample <- order(runif(dim(lego)[1]))
lego_train <- lego[lego_train_sample[1:6000],-dim(lego)[2]]
lego_test <- lego[lego_train_sample[6001:length(lego_train_sample)],-dim(lego)[2]]
# 2. Can you store its correspondents target variable in 2 separate vectors?
lego_train_lables <- lego[lego_train_sample[1:6000],"country"]
lego_test_lables <- lego[lego_train_sample[6001:length(lego_train_sample)],"country"]
# 2. Find k.
sqrt(dim(lego_train)[2])
# k = 99
# 2. Find k.
sqrt(dim(lego_train)[1])
# k = 99
# 2. Find k.
ceiling(sqrt(dim(lego_train)[1]))
?kmm
?knn
# 3. Use the knn() function from the class package to classify the test data.
lego_test_pred <- knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = K,prob = TRUE)
# 2. Find k.
K=ceiling(sqrt(dim(lego_train)[1]))
print(K)
# k = 99
# 3. Use the knn() function from the class package to classify the test data.
lego_test_pred <- knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = K,prob = TRUE)
head(iris)
head(iris3)
data("iris3")
iris3[1:25,1]
iris3[1:25,,1]
str(lego_train_lables)
str(lego_train)
str(lego_train)
str(lego_train$ages)
str(lego_train$val_star_rating)
lego_train$val_star_rating[1:20]
attr(lego_train$val_star_rating)
attributes(lego_train$val_star_rating)
as.numeric(lego_train$val_star_rating)
as.character(lego_train$val_star_rating)
as.numeric(as.character(lego_train$val_star_rating)_)
as.numeric(as.character(lego_train$val_star_rating))
str(lego)
lego$review_difficulty
str(lego)
lego$star_rating
str(lego)
lego$review_difficulty=as.numeric(as.character(lego$star_rating))
lego$val_star_rating=as.numeric(as.character(lego$val_star_rating))
str(lego)
# 1. Import and read the csv data file.
lego <- read.csv("lego_sets_1.csv")
lego<-na.omit(lego)
# 3. Drop features
lego$prod_long_desc<-NULL
lego$prod_desc <- NULL
lego$prod_id <- NULL
lego$set_name <- NULL
lego$theme_name <- NULL
lego=na.omit(lego)
# 4. Find the target variable. How many levels this variable have?
table(lego$country)
# 5. Transform this nominal variable to factor and give its levels a better names. What are their correspondent鈥檚 percentage with 1 decimal place?
lego$country <- factor(lego$country, levels = c("NON US","US"), labels = c("None USA","USA"))
round(prop.table(table(lego$country)) * 100, digits = 1)
# 1. Create the normalize() function and check if it work correctly using a vector of numbers before applying this function to the whole data.
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)));
}
# test normalization function - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
lego=na.omit(lego)
x=lego
str(x)
lego$list_price=normalize(lego$list_price)
lego$num_reviews=normalize(lego$num_reviews)
lego$piece_count=normalize(lego$piece_count)
lego$play_star_rating=normalize(lego$play_star_rating)
lego$star_rating=as.numeric(as.character(lego$star_rating))
lego$val_star_rating=as.numeric(as.character(lego$val_star_rating))
str(lego)
lego$star_rating=normalize(lego$star_rating)
lego$val_star_rating=normalize(lego$val_star_rating)
str(lego)
# 1. Import and read the csv data file.
lego <- read.csv("lego_sets_1.csv")
lego<-na.omit(lego)
# 3. Drop features
lego$prod_long_desc<-NULL
lego$prod_desc <- NULL
lego$prod_id <- NULL
lego$set_name <- NULL
lego$theme_name <- NULL
lego=na.omit(lego)
# 5. Transform this nominal variable to factor and give its levels a better names. What are their correspondent鈥檚 percentage with 1 decimal place?
lego$country <- factor(lego$country, levels = c("NON US","US"), labels = c("None USA","USA"))
lego=na.omit(lego)
str(lego)
as.numeric(as.character(lego$val_star_rating))
str(lego)
is.na(as.numeric(as.character(lego$val_star_rating)))
which(as.numeric(as.character(lego$val_star_rating))=="NA")
as.numeric(as.character(lego$val_star_rating))
which(as.numeric(as.character(lego$val_star_rating))==NA
)
str(as.numeric(as.character(lego$val_star_rating)))
"NA"%in%as.numeric(as.character(lego$val_star_rating))
NA%in%as.numeric(as.character(lego$val_star_rating))
which(as.numeric(as.character(lego$val_star_rating))==NA)
is.na(as.numeric(as.character(lego$val_star_rating)))
sum(is.na(as.numeric(as.character(lego$val_star_rating))))
index=length(as.numeric(as.character(lego$val_star_rating)))
index[is.na(as.numeric(as.character(lego$val_star_rating)))]
index=1:length(as.numeric(as.character(lego$val_star_rating)))
index[is.na(as.numeric(as.character(lego$val_star_rating)))]
mean(as.numeric(as.character(lego$val_star_rating)))
mean(as.numeric(as.character(lego$val_star_rating)),na.rm = TRUE)
lego$star_rating=as.numeric(as.character(lego$star_rating))
lego$val_star_rating=as.numeric(as.character(lego$val_star_rating))
str(lego)
?apply(array, margin, ...)
x=lego
y=apply(x,2,function(cl){
index=1:length(c1)
na.index=index[is.na(index)]
M=mean(cl,na.rm = TRUE)
cl[na.index]=M
return(c1)
})
x=lego
y=apply(x,2,function(cl){
index=1:length(cl)
na.index=index[is.na(index)]
M=mean(cl,na.rm = TRUE)
cl[na.index]=M
return(cl)
})
summary(apply(lego,2,function(x){
sum(is.na(x))
}))
print(apply(lego,2,function(x){
sum(is.na(x))
}))
M=mean(lego$val_star_rating,na.rm = TRUE)
na.index=1:length(lego$val_star_rating)[is.na(lego$val_star_rating)]
lego$val_star_rating[na.index]=M
str(lego)
index=1:length(lego$val_star_rating
)
na.index=index[is.na(lego$val_star_rating)]
na.index
x=lego$val_star_rating
x[na.index]=M
sum(is.na(x))
M=mean(lego$val_star_rating,na.rm = TRUE)
index=1:length(lego$val_star_rating)
na.index=index[is.na(lego$val_star_rating)]
lego$val_star_rating[na.index]=M
print(apply(lego,2,function(x){
sum(is.na(x))
}))
lego$list_price=normalize(lego$list_price)
lego$num_reviews=normalize(lego$num_reviews)
lego$piece_count=normalize(lego$piece_count)
lego$play_star_rating=normalize(lego$play_star_rating)
lego$star_rating=normalize(lego$star_rating)
lego$val_star_rating=normalize(lego$val_star_rating)
str(lego)
# 1. Create those training and test sets
set.seed(12345)
lego_train_sample <- order(runif(dim(lego)[1]))
lego_train <- lego[lego_train_sample[1:6000],-dim(lego)[2]]
lego_test <- lego[lego_train_sample[6001:length(lego_train_sample)],-dim(lego)[2]]
# 2. Can you store its correspondents target variable in 2 separate vectors?
lego_train_lables <- lego[lego_train_sample[1:6000],"country"]
lego_test_lables <- lego[lego_train_sample[6001:length(lego_train_sample)],"country"]
str(lego_train)
# 2. Find k.
K=ceiling(sqrt(dim(lego_train)[1]))
print(K)
# k = 99
# 3. Use the knn() function from the class package to classify the test data.
lego_test_pred <- knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = K,prob = TRUE)
?knn
table(lego_test_lables)
str(lego_test_lables)
# 3. Use the knn() function from the class package to classify the test data.
lego_test_pred <- knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = 10,prob = TRUE)
# 3. Use the knn() function from the class package to classify the test data.
lego_test_pred <- knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = K)
KNN
knn
str(lego)
# 3. Use the knn() function from the class package to classify the test data.
lego_test_pred <- knn(train = lego_train[,-1], test=lego_test[,-1], cl = lego_train_lables, k = K)
# 3. Use the knn() function from the class package to classify the test data.
lego_test_pred <- knn(train = lego_train[,-c(1,6)], test=lego_test[,-(1,6)], cl = lego_train_lables, k = K)
# 3. Use the knn() function from the class package to classify the test data.
lego_test_pred <- knn(train = lego_train[,-c(1,6)], test=lego_test[,-c(1,6)], cl = lego_train_lables, k = K)
str(lego_test_pred)
table(lego_test_lables,lego_test_pred)
table(lego_test_pre,lego_test_lables)
table(lego_test_pre,lego_test_lables)
table(lego_test_pred,lego_test_lables)
install.packages("gmodels")
colnames()
colnames(lego)
# load the "gmodels" library(gmodel)
library(gmodels)
?CrossTable
#Create the cross tabulation
CrossTable(x = lego_test_lables,y=lego_test_pred,prop.chisq = FALSE)
table(lego_test_lables,lego_test_pred)
a=table(lego_test_lables,lego_test_pred)
diag(a)
confusion.mat=as.matrix(table(lego_test_lables,lego_test_pred))
confusion.mat
diag(confusion.mat)
confusion.mat=as.matrix(table(lego_test_lables,lego_test_pred))
sum(diag(confusion.mat))/sum(confusion.mat)
sprintf("the test accuracy is :%f",sum(diag(confusion.mat))/sum(confusion.mat)
confusion.mat=as.matrix(table(lego_test_lables,lego_test_pred))
?sprintf
sprintf("the test accuracy is : %f",sum(diag(confusion.mat))/sum(confusion.mat))
table(lego_train_lables)
prop.table(lego_train_lables)
prop.table(table(lego_train_lables))
lego_train=lego_train[,-c(1,6)]
lego_test=lego_test[,-c(1,6)]
str(lego_train)
str(scale(lego_train))
str(as.data.frame(scale(lego_train)))
lego_train=as.data.frame(scale(lego_train))
lego_test=as.data.frame(scale(lego_test))
str(lego_train)
str(lego_test)
summary(lego_train)
lego_test_pred_new <- knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = K)
CrossTable(x = lego_test_lables,y=lego_test_pred_new,prop.chisq = FALSE)
lego_test_pred_new <- knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = 10)
CrossTable(x = lego_test_lables,y=lego_test_pred_new,prop.chisq = FALSE)
install.packages("randomForest")
ceiling(sqrt(dim(lego_train)[1]))
dim(lego_test)
k=5:ceiling(sqrt(dim(lego_train)[1]))
accuracy=c()
for(i in k){
pred=knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = k)
confusion.m=as.matrix(table(lego_test_lables,pred))
acc=sum(diag(confusion.mat))/sum(confusion.mat)
accuracy<-c(accuracy,acc)
}
k
accuracy
k=5:ceiling(sqrt(dim(lego_train)[1]))
accuracy=c()
for(i in k){
pred=knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = i)
confusion.m=as.matrix(table(lego_test_lables,pred))
acc=sum(diag(confusion.mat))/sum(confusion.mat)
accuracy<-c(accuracy,acc)
}
accuracy
k=5:ceiling(sqrt(dim(lego_train)[1]))
accuracy=c()
for(i in k){
pred=knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = i)
confusion.m=as.matrix(table(lego_test_lables,pred))
acc=sum(diag(confusion.m))/sum(confusion.m)
accuracy<-c(accuracy,acc)
}
accuracy
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
library(randomForest)
?randomForest
rf=randomForest(lego_train,lego_train_lables,importance = TRUE,proximity = TRUE,oob.prox = TRUE)
rf.pred=predict(rf,lego_test)
CrossTable(lego_test_lables,rf.pred)
CrossTable(lego_test_lables,rf.pred,prop.chisq = F)
confusion.mat.rf=as.matrix(table(lego_test_lables,rf.pred))
sprintf("the test accuracy is : %f",sum(diag(confusion.mat.rf))/sum(confusion.mat.rf))
# 1. Import and read the csv data file.
lego <- read.csv("lego_sets_1.csv")
lego<-na.omit(lego)
# 3. Drop features
lego$prod_long_desc<-NULL
lego$prod_desc <- NULL
lego$prod_id <- NULL
lego$set_name <- NULL
lego$theme_name <- NULL
lego=na.omit(lego)
# 4. Find the target variable. How many levels this variable have?
table(lego$country)
# 5. Transform this nominal variable to factor and give its levels a better names. What are their correspondent鈥檚 percentage with 1 decimal place?
lego$country <- factor(lego$country, levels = c("NON US","US"), labels = c("None USA","USA"))
round(prop.table(table(lego$country)) * 100, digits = 1)
# 1. Create the normalize() function and check if it work correctly using a vector of numbers before applying this function to the whole data.
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)));
}
# test normalization function - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
lego=na.omit(lego)
lego$star_rating=as.numeric(as.character(lego$star_rating))
lego$val_star_rating=as.numeric(as.character(lego$val_star_rating))
print(apply(lego,2,function(x){
sum(is.na(x))
}))
M=mean(lego$val_star_rating,na.rm = TRUE)
index=1:length(lego$val_star_rating)
na.index=index[is.na(lego$val_star_rating)]
lego$val_star_rating[na.index]=M
lego$list_price=normalize(lego$list_price)
lego$num_reviews=normalize(lego$num_reviews)
lego$piece_count=normalize(lego$piece_count)
lego$play_star_rating=normalize(lego$play_star_rating)
lego$star_rating=normalize(lego$star_rating)
lego$val_star_rating=normalize(lego$val_star_rating)
# 1. Create those training and test sets
set.seed(12345)
lego_train_sample <- order(runif(dim(lego)[1]))
lego_train <- lego[lego_train_sample[1:6000],-dim(lego)[2]]
lego_test <- lego[lego_train_sample[6001:length(lego_train_sample)],-dim(lego)[2]]
# 2. Can you store its correspondents target variable in 2 separate vectors?
lego_train_lables <- lego[lego_train_sample[1:6000],"country"]
lego_test_lables <- lego[lego_train_sample[6001:length(lego_train_sample)],"country"]
# 2. Find k.
K=ceiling(sqrt(dim(lego_train)[1]))
print(K)
# k = 99
# 3. Use the knn() function from the class package to classify the test data.
lego_test_pred <- knn(train = lego_train[,-c(1,6)], test=lego_test[,-c(1,6)], cl = lego_train_lables, k = K)
#Create the cross tabulation
CrossTable(x = lego_test_lables,y=lego_test_pred,prop.chisq = FALSE)
confusion.mat=as.matrix(table(lego_test_lables,lego_test_pred))
sprintf("the test accuracy is : %f",sum(diag(confusion.mat))/sum(confusion.mat))
prop.table(table(lego_train_lables))
lego_train=lego_train[,-c(1,6)]
lego_test=lego_test[,-c(1,6)]
lego_train_scale=as.data.frame(scale(lego_train))
lego_test_scale=as.data.frame(scale(lego_test))
summary(lego_train_scale)
lego_test_pred_new <- knn(train = lego_train_scale, test=lego_test_scale, cl = lego_train_lables, k = K)
CrossTable(x = lego_test_lables,y=lego_test_pred_new,prop.chisq = FALSE)
rf=randomForest(lego_train,lego_train_lables,importance = TRUE,proximity = TRUE,oob.prox = TRUE)
rf.pred=predict(rf,lego_test)
confusion.mat.rf=as.matrix(table(lego_test_lables,rf.pred))
sprintf("the test accuracy is : %f",sum(diag(confusion.mat.rf))/sum(confusion.mat.rf))
CrossTable(x = lego_test_lables,y=rf.pred,prop.chisq = FALSE)
k=5:ceiling(sqrt(dim(lego_train)[1]))
accuracy=c()
for(i in k){
pred=knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = i)
confusion.m=as.matrix(table(lego_test_lables,pred))
acc=sum(diag(confusion.m))/sum(confusion.m)
accuracy<-c(accuracy,acc)
}
accuracy
plot(k,accuracy,type = "o",col="red")
accuracy
k=5:ceiling(sqrt(dim(lego_train)[1]))
accuracy=c()
for(i in k){
pred=knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = i)
confusion.m=as.matrix(table(lego_test_lables,pred))
acc=sum(diag(confusion.m))/sum(confusion.m)
accuracy<-c(accuracy,acc)
}
plot(k,accuracy,type = "o",col="red")
k=5:ceiling(sqrt(dim(lego_train)[1]))
accuracy=c()
for(i in k){
pred=knn(train = lego_train, test=lego_test, cl = lego_train_lables, k = i)
confusion.m=as.matrix(table(lego_test_lables,pred))
acc=sum(diag(confusion.m))/sum(confusion.m)
accuracy<-c(accuracy,acc)
}
plot(k,accuracy,type = "o",col="red")
accuracy
which.max(accuracy)
which(accuracy)
max(accuracy)
